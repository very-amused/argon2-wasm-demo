var _,O;let A;function R(_){return _ instanceof Error?_.message:"string"==typeof _?_:"An unknown error has occured, and a message was unable to be parsed from this error"}function N(_,O=3){for(let A=0;A<O;A++)crypto.getRandomValues(_)}async function e(_=".",A=!1){if("object"!=typeof WebAssembly)throw O.ARGON2WASM_UNSUPPORTED_BROWSER;const R={env:{emscripten_notify_memory_growth(){}}},N=A&&await async function(_="."){const O=await fetch(`${_}/simd-test.wasm`),A=await O.arrayBuffer();return WebAssembly.validate(A)}(_)?"argon2-simd.wasm":"argon2.wasm";let e;if("function"==typeof WebAssembly.instantiateStreaming)e=await WebAssembly.instantiateStreaming(fetch(`${_}/${N}`),R);else{const O=await fetch(`${_}/${N}`),A=await O.arrayBuffer();e=await WebAssembly.instantiate(A,R)}return e.instance.exports}function T(_,O){const R=_.salt.byteLength,e=A.malloc(R);let T=new Uint8Array(A.memory.buffer,e,R);for(let O=0;O<R;O++)T[O]=_.salt[O];const a=(new TextEncoder).encode(_.password.normalize("NFKC")),t=a.byteLength,G=A.malloc(t);let s=new Uint8Array(A.memory.buffer,G,t);for(let _=0;_<t;_++)s[_]=a[_];N(a);const n=_.hashLen,o=A.malloc(n),r=[_.timeCost,_.memoryCost,1,G,t,e,R,o,n];let E;switch(O){case 0:E=A.argon2i_hash_raw.apply(null,r);break;case 1:E=A.argon2d_hash_raw.apply(null,r);break;case 2:E=A.argon2id_hash_raw.apply(null,r)}s=new Uint8Array(A.memory.buffer,G,t),N(s),A.free(G),T=new Uint8Array(A.memory.buffer,e,R),N(T),A.free(e),N(_.salt);const M=new Uint8Array(n),S=new Uint8Array(A.memory.buffer,o,n);for(let _=0;_<n;_++)M[_]=S[_];N(S),A.free(o),postMessage({code:E,body:M},[M.buffer])}!function(_){_[_.LoadArgon2=0]="LoadArgon2",_[_.Hash2i=1]="Hash2i",_[_.Hash2d=2]="Hash2d",_[_.Hash2id=3]="Hash2id"}(_||(_={})),function(_){_[_.ARGON2_OK=0]="ARGON2_OK",_[_.ARGON2_OUTPUT_PTR_NULL=-1]="ARGON2_OUTPUT_PTR_NULL",_[_.ARGON2_OUTPUT_TOO_SHORT=-2]="ARGON2_OUTPUT_TOO_SHORT",_[_.ARGON2_OUTPUT_TOO_LONG=-3]="ARGON2_OUTPUT_TOO_LONG",_[_.ARGON2_PWD_TOO_SHORT=-4]="ARGON2_PWD_TOO_SHORT",_[_.ARGON2_PWD_TOO_LONG=-5]="ARGON2_PWD_TOO_LONG",_[_.ARGON2_SALT_TOO_SHORT=-6]="ARGON2_SALT_TOO_SHORT",_[_.ARGON2_SALT_TOO_LONG=-7]="ARGON2_SALT_TOO_LONG",_[_.ARGON2_AD_TOO_SHORT=-8]="ARGON2_AD_TOO_SHORT",_[_.ARGON2_AD_TOO_LONG=-9]="ARGON2_AD_TOO_LONG",_[_.ARGON2_SECRET_TOO_SHORT=-10]="ARGON2_SECRET_TOO_SHORT",_[_.ARGON2_SECRET_TOO_LONG=-11]="ARGON2_SECRET_TOO_LONG",_[_.ARGON2_TIME_TOO_SMALL=-12]="ARGON2_TIME_TOO_SMALL",_[_.ARGON2_TIME_TOO_LARGE=-13]="ARGON2_TIME_TOO_LARGE",_[_.ARGON2_MEMORY_TOO_LITTLE=-14]="ARGON2_MEMORY_TOO_LITTLE",_[_.ARGON2_MEMORY_TOO_MUCH=-15]="ARGON2_MEMORY_TOO_MUCH",_[_.ARGON2_LANES_TOO_FEW=-16]="ARGON2_LANES_TOO_FEW",_[_.ARGON2_LANES_TOO_MANY=-17]="ARGON2_LANES_TOO_MANY",_[_.ARGON2_PWD_PTR_MISMATCH=-18]="ARGON2_PWD_PTR_MISMATCH",_[_.ARGON2_SALT_PTR_MISMATCH=-19]="ARGON2_SALT_PTR_MISMATCH",_[_.ARGON2_SECRET_PTR_MISMATCH=-20]="ARGON2_SECRET_PTR_MISMATCH",_[_.ARGON2_AD_PTR_MISMATCH=-21]="ARGON2_AD_PTR_MISMATCH",_[_.ARGON2_MEMORY_ALLOCATION_ERROR=-22]="ARGON2_MEMORY_ALLOCATION_ERROR",_[_.ARGON2_FREE_MEMORY_CBK_NULL=-23]="ARGON2_FREE_MEMORY_CBK_NULL",_[_.ARGON2_ALLOCATE_MEMORY_CBK_NULL=-24]="ARGON2_ALLOCATE_MEMORY_CBK_NULL",_[_.ARGON2_INCORRECT_PARAMETER=-25]="ARGON2_INCORRECT_PARAMETER",_[_.ARGON2_INCORRECT_TYPE=-26]="ARGON2_INCORRECT_TYPE",_[_.ARGON2_OUT_PTR_MISMATCH=-27]="ARGON2_OUT_PTR_MISMATCH",_[_.ARGON2_THREADS_TOO_FEW=-28]="ARGON2_THREADS_TOO_FEW",_[_.ARGON2_THREADS_TOO_MANY=-29]="ARGON2_THREADS_TOO_MANY",_[_.ARGON2_MISSING_ARGS=-30]="ARGON2_MISSING_ARGS",_[_.ARGON2_ENCODING_FAIL=-31]="ARGON2_ENCODING_FAIL",_[_.ARGON2_DECODING_FAIL=-32]="ARGON2_DECODING_FAIL",_[_.ARGON2_THREAD_FAIL=-33]="ARGON2_THREAD_FAIL",_[_.ARGON2_DECODING_LENGTH_FAIL=-34]="ARGON2_DECODING_LENGTH_FAIL",_[_.ARGON2_VERIFY_MISMATCH=-35]="ARGON2_VERIFY_MISMATCH",_[_.ARGON2WASM_UNKNOWN=1]="ARGON2WASM_UNKNOWN",_[_.ARGON2WASM_BAD_REQUEST=2]="ARGON2WASM_BAD_REQUEST",_[_.ARGON2WASM_UNSUPPORTED_BROWSER=3]="ARGON2WASM_UNSUPPORTED_BROWSER"}(O||(O={})),onmessage=async function(N){(Array.isArray(N.data)||"object"!=typeof N.data)&&postMessage({code:O.ARGON2WASM_BAD_REQUEST,body:null});const a=N.data;switch(a.action){case _.LoadArgon2:try{const _=a.body;A=await e(_.wasmRoot,_.simd)}catch(_){return void function(_){_ in O?postMessage({code:_}):postMessage({code:O.ARGON2WASM_UNKNOWN,message:R(_)})}(_)}postMessage({code:O.ARGON2_OK});break;case _.Hash2i:T(a.body,0);break;case _.Hash2d:T(a.body,1);break;case _.Hash2id:T(a.body,2);break;default:postMessage({code:O.ARGON2WASM_BAD_REQUEST})}};
